// Class for handling integers within the range [-10000, 10000]
public class SmallInteger {
	private int value; // Stores the value of the number
	private static final int MAX_VALUE = 10000; // Maximum allowable value
	private static final int MIN_VALUE = -10000; // Minimum allowable value

	// Primary constructor that accepts an integer and checks if it is within the valid range
	public SmallInteger(int value) {
		if (value > MAX_VALUE || value < MIN_VALUE) {
			throw new RuntimeException("Value out of range");
		}
		this.value = value;
	}

	// Copy constructor that creates a new object based on an existing one
	public SmallInteger(SmallInteger other) {
		this(other.value); // Calls the primary constructor
	}

	// Method to add two SmallInteger objects
	public SmallInteger add(SmallInteger arg) {
		int result = this.value + arg.value;
		if (result > MAX_VALUE || result < MIN_VALUE) {
			throw new RuntimeException("Result out of range");
		}
		return new SmallInteger(result);
	}

	// Method to subtract one SmallInteger object from another
	public SmallInteger sub(SmallInteger arg) {
		int result = this.value - arg.value;
		if (result > MAX_VALUE || result < MIN_VALUE) {
			throw new RuntimeException("Result out of range");
		}
		return new SmallInteger(result);
	}

	// Method to multiply two SmallInteger objects
	public SmallInteger mul(SmallInteger arg) {
		int result = this.value * arg.value;
		if (result > MAX_VALUE || result < MIN_VALUE) {
			throw new RuntimeException("Result out of range");
		}
		return new SmallInteger(result);
	}

	// Method for integer division of one SmallInteger object by another
	public SmallInteger integerDivision(SmallInteger arg) {
		if (arg.value == 0) {
			throw new ArithmeticException("Division by zero");
		}
		int result = this.value / arg.value;
		return new SmallInteger(result);
	}

	// Method to find the remainder of the division of one SmallInteger object by another
	public SmallInteger remainderDivision(SmallInteger arg) {
		if (arg.value == 0) {
			throw new ArithmeticException("Division by zero");
		}
		int result = this.value % arg.value;
		return new SmallInteger(result);
	}

	// Method to get the current value
	public int getValue() {
		return this.value;
	}
}