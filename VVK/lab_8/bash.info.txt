1. Основы Bash-скриптов

Bash-скрипты — это текстовые файлы, содержащие последовательность команд, которые выполняются в командной оболочке Bash. 
Они используются для автоматизации задач на Linux и других Unix-подобных системах.

2. Создание Bash-скрипта
    Открыть терминал.
    Перейти в каталог, где будет храниться скрипт:

	cd /путь/к/каталогу

Создать новый файл для скрипта с расширением .sh:

	touch <имя_скрипта.sh>

Открыть файл в текстовом редакторе, например, в nano:

    nano <имя_скрипта.sh>

3. Основы написания скрипта

    В начале файла необходимо указать интерпретатор, который будет выполнять скрипт. Для Bash скрипта это будет строка:

	#!/bin/bash

Эта строка называется shebang и указывает системе, что скрипт должен быть выполнен с помощью Bash.

Пример простого скрипта:

    #!/bin/bash
    echo "Hello, World!"

    В данном примере скрипт просто выводит сообщение "Hello, World!" в терминал.

4. Добавление переменных и параметров

    В Bash-скрипте можно использовать переменные, которые будут хранить данные. Пример:

	#!/bin/bash
	имя="John"
	echo "Привет, $имя!"

Можно также передавать параметры в скрипт при его запуске:

	#!/bin/bash
	echo "Привет, $1!"

При запуске скрипта, например:

    ./имя_скрипта.sh Alice

    Скрипт выведет: Привет, Alice!

5. Управление потоком выполнения (условные операторы)

    Для проверки условий можно использовать if:

	#!/bin/bash
	число=10
	if [ $число -gt 5 ]; then
	echo "Число больше 5"
	else
	echo "Число меньше или равно 5"
	fi

Также есть команды для сравнения строк:

    if [ "$строка1" == "$строка2" ]; then
      echo "Строки совпадают"
    fi

6. Циклы в Bash-скриптах

Bash поддерживает несколько типов циклов для повторения операций.

    Цикл for:

	#!/bin/bash
	for i in {1..5}; do
	echo "Число: $i"
	done

Этот цикл выведет числа от 1 до 5.

Цикл while:

    #!/bin/bash
    счётчик=1
    while [ $счётчик -le 5 ]; do
      echo "Число: $счётчик"
      ((счётчик++))
    done

7. Работа с функциями

    В Bash-скриптах можно создавать функции для упрощения кода и повторного использования логики:

    #!/bin/bash
    функция_приветствия() {
      echo "Привет, $1!"
    }

8. Массивы с индексами

В Bash массивы индексируются начиная с нуля. Для создания массива можно использовать следующую форму:

    # Объявление массива
    фрукты=("яблоко" "банан" "вишня")
    echo ${фрукты[0]}  # Выведет "яблоко"

9. Права на выполнение скрипта

Чтобы запустить скрипт, нужно убедиться, что он имеет права на выполнение.

    Устанавливаем права на выполнение:

	chmod +x имя_скрипта.sh

Запускаем скрипт:

    ./имя_скрипта.sh

10. Обработка ошибок

    Важно обрабатывать возможные ошибки в скриптах, чтобы избежать неожиданного завершения.

    Например, можно использовать exit с кодом ошибки:

    #!/bin/bash
    if [ ! -f "/путь/к/файлу" ]; then
      echo "Файл не найден!"
      exit 1
    fi

    Код завершения exit 1 обозначает ошибку, а exit 0 — успешное завершение.

11. Завершение работы с процессами

Если скрипт запускает длительные процессы или фоновые задачи, можно использовать команду wait для ожидания завершения этих процессов:

	#!/bin/bash
	./долгая_задача.sh &
	process_id=$!
	wait $process_id
	echo "Задача завершена"

12. Отладка Bash-скриптов

	Для отладки можно использовать флаг -x при запуске скрипта, чтобы отслеживать выполнение команд:

	bash -x имя_скрипта.sh